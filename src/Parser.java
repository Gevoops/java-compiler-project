
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import compiler.ParserSym;
import compiler.Lexer;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\007\003" +
    "\000\002\007\003\000\002\006\005\000\002\006\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\006\000\002\012\007" +
    "\000\002\013\007\000\002\014\011\000\002\015\007\000" +
    "\002\016\014\000\002\020\007\000\002\020\002\000\002" +
    "\017\004\000\002\005\005\000\002\021\004\000\002\021" +
    "\002\000\002\022\005\000\002\022\003\000\002\023\005" +
    "\000\002\023\003\000\002\024\006\000\002\024\005\000" +
    "\002\027\005\000\002\027\003\000\002\025\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\006\000\002\026" +
    "\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\006\010\ufffe\020\ufffe\001\002\000\004\002" +
    "\143\001\002\000\006\010\006\020\007\001\002\000\006" +
    "\022\ufff9\023\ufff9\001\002\000\024\010\uffe5\020\uffe5\021" +
    "\uffe5\025\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\001\002\000\004\002\001\001\002\000\006\022\013\023" +
    "\014\001\002\000\006\010\uffff\020\uffff\001\002\000\004" +
    "\010\021\001\002\000\006\031\016\034\017\001\002\000" +
    "\004\024\020\001\002\000\004\024\ufffb\001\002\000\004" +
    "\024\ufffc\001\002\000\006\010\ufffd\020\ufffd\001\002\000" +
    "\006\022\ufffa\023\ufffa\001\002\000\024\010\033\020\007" +
    "\021\025\025\036\032\032\033\023\035\042\036\031\037" +
    "\026\001\002\000\004\016\137\001\002\000\032\010\ufff4" +
    "\020\ufff4\021\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\032" +
    "\ufff4\033\ufff4\035\ufff4\036\ufff4\037\ufff4\001\002\000\034" +
    "\002\uffe7\010\uffe7\020\uffe7\021\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\032\uffe7\033\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\001\002\000\004\016\133\001\002\000\032\010\ufff8\020" +
    "\ufff8\021\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\032\ufff8" +
    "\033\ufff8\035\ufff8\036\ufff8\037\ufff8\001\002\000\032\010" +
    "\ufff1\020\ufff1\021\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\032\ufff1\033\ufff1\035\ufff1\036\ufff1\037\ufff1\001\002\000" +
    "\004\016\116\001\002\000\004\016\073\001\002\000\004" +
    "\015\070\001\002\000\032\010\ufff3\020\ufff3\021\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3\033\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\001\002\000\032\010\ufff7\020\ufff7\021" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\032\ufff7\033\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\001\002\000\004\024\067\001" +
    "\002\000\032\010\ufff6\020\ufff6\021\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\032\ufff6\033\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\001\002\000\032\010\ufff2\020\ufff2\021\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\032\ufff2\033\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\001\002\000\032\010\ufff5\020\ufff5\021\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\032\ufff5\033\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\001\002\000\004\016\044\001\002" +
    "\000\030\010\uffe6\020\uffe6\021\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\032\uffe6\033\uffe6\035\uffe6\036\uffe6\037\uffe6\001\002" +
    "\000\012\007\051\010\045\011\046\016\052\001\002\000" +
    "\020\004\uffd8\005\uffd8\006\uffd8\012\uffd8\013\uffd8\017\uffd8" +
    "\024\uffd8\001\002\000\020\004\uffd7\005\uffd7\006\uffd7\012" +
    "\uffd7\013\uffd7\017\uffd7\024\uffd7\001\002\000\020\004\uffdb" +
    "\005\uffdb\006\uffdb\012\uffdb\013\uffdb\017\uffdb\024\uffdb\001" +
    "\002\000\020\004\uffdd\005\uffdd\006\057\012\uffdd\013\uffdd" +
    "\017\uffdd\024\uffdd\001\002\000\004\016\064\001\002\000" +
    "\012\007\051\010\045\011\046\016\052\001\002\000\006" +
    "\005\055\017\054\001\002\000\004\024\061\001\002\000" +
    "\012\007\051\010\045\011\046\016\052\001\002\000\020" +
    "\004\uffde\005\uffde\006\057\012\uffde\013\uffde\017\uffde\024" +
    "\uffde\001\002\000\012\007\051\010\045\011\046\016\052" +
    "\001\002\000\020\004\uffdc\005\uffdc\006\uffdc\012\uffdc\013" +
    "\uffdc\017\uffdc\024\uffdc\001\002\000\032\010\uffee\020\uffee" +
    "\021\uffee\025\uffee\026\uffee\027\uffee\030\uffee\032\uffee\033" +
    "\uffee\035\uffee\036\uffee\037\uffee\001\002\000\006\005\055" +
    "\017\063\001\002\000\020\004\uffda\005\uffda\006\uffda\012" +
    "\uffda\013\uffda\017\uffda\024\uffda\001\002\000\012\007\051" +
    "\010\045\011\046\016\052\001\002\000\006\005\055\017" +
    "\066\001\002\000\020\004\uffd9\005\uffd9\006\uffd9\012\uffd9" +
    "\013\uffd9\017\uffd9\024\uffd9\001\002\000\032\010\uffe8\020" +
    "\uffe8\021\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\032\uffe8" +
    "\033\uffe8\035\uffe8\036\uffe8\037\uffe8\001\002\000\012\007" +
    "\051\010\045\011\046\016\052\001\002\000\006\005\055" +
    "\024\072\001\002\000\032\010\ufff0\020\ufff0\021\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\032\ufff0\033\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\001\002\000\014\007\051\010\045\011" +
    "\046\014\077\016\052\001\002\000\010\012\uffe3\013\104" +
    "\017\uffe3\001\002\000\010\012\uffe1\013\uffe1\017\uffe1\001" +
    "\002\000\006\004\114\005\055\001\002\000\004\016\111" +
    "\001\002\000\006\012\102\017\101\001\002\000\022\010" +
    "\033\020\007\025\036\032\032\033\023\035\042\036\031" +
    "\037\026\001\002\000\014\007\051\010\045\011\046\014" +
    "\077\016\052\001\002\000\010\012\uffe4\013\104\017\uffe4" +
    "\001\002\000\014\007\051\010\045\011\046\014\077\016" +
    "\052\001\002\000\010\012\uffe2\013\uffe2\017\uffe2\001\002" +
    "\000\004\030\107\001\002\000\022\010\033\020\007\025" +
    "\036\032\032\033\023\035\042\036\031\037\026\001\002" +
    "\000\032\010\uffed\020\uffed\021\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\032\uffed\033\uffed\035\uffed\036\uffed\037\uffed" +
    "\001\002\000\014\007\051\010\045\011\046\014\077\016" +
    "\052\001\002\000\006\012\102\017\113\001\002\000\010" +
    "\012\uffe0\013\uffe0\017\uffe0\001\002\000\012\007\051\010" +
    "\045\011\046\016\052\001\002\000\012\005\055\012\uffdf" +
    "\013\uffdf\017\uffdf\001\002\000\012\007\051\010\045\011" +
    "\046\016\052\001\002\000\006\005\055\017\120\001\002" +
    "\000\004\020\121\001\002\000\006\026\uffe9\027\uffe9\001" +
    "\002\000\006\026\124\027\123\001\002\000\004\023\130" +
    "\001\002\000\004\011\125\001\002\000\004\023\126\001" +
    "\002\000\026\010\uffe5\020\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\032\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5\001\002\000" +
    "\026\010\033\020\007\025\036\026\uffea\027\uffea\032\032" +
    "\033\023\035\042\036\031\037\026\001\002\000\024\010" +
    "\uffe5\020\uffe5\021\uffe5\025\uffe5\032\uffe5\033\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\001\002\000\024\010\033\020\007\021" +
    "\132\025\036\032\032\033\023\035\042\036\031\037\026" +
    "\001\002\000\032\010\uffeb\020\uffeb\021\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\032\uffeb\033\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\001\002\000\014\007\051\010\045\011\046\014" +
    "\077\016\052\001\002\000\006\012\102\017\135\001\002" +
    "\000\022\010\033\020\007\025\036\032\032\033\023\035" +
    "\042\036\031\037\026\001\002\000\032\010\uffec\020\uffec" +
    "\021\uffec\025\uffec\026\uffec\027\uffec\030\uffec\032\uffec\033" +
    "\uffec\035\uffec\036\uffec\037\uffec\001\002\000\004\010\140" +
    "\001\002\000\004\017\141\001\002\000\004\024\142\001" +
    "\002\000\032\010\uffef\020\uffef\021\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\032\uffef\033\uffef\035\uffef\036\uffef\037" +
    "\uffef\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\004\011\005\007\006\010\001\001\000\002" +
    "\001\001\000\004\021\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\027\010\042\011\026\012\034\013\036\014\040\015" +
    "\023\016\033\017\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\047\026\046\027\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\047\026\046\027\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\055\026\046\001" +
    "\001\000\002\001\001\000\004\026\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\047\026\046\027\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\047\026\046\027\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\077\023\073\024\074\025\047\026" +
    "\046\027\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\027\010\105\011\026\012\034\013\036\014\040" +
    "\015\023\016\033\017\037\001\001\000\014\023\102\024" +
    "\074\025\047\026\046\027\075\001\001\000\002\001\001" +
    "\000\012\024\104\025\047\026\046\027\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\027\010\107" +
    "\011\026\012\034\013\036\014\040\015\023\016\033\017" +
    "\037\001\001\000\002\001\001\000\016\022\111\023\073" +
    "\024\074\025\047\026\046\027\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\047\026\046\027\114" +
    "\001\001\000\002\001\001\000\010\025\047\026\046\027" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\126\001\001" +
    "\000\024\005\027\010\042\011\026\012\034\013\036\014" +
    "\040\015\023\016\033\017\037\001\001\000\004\021\130" +
    "\001\001\000\024\005\027\010\042\011\026\012\034\013" +
    "\036\014\040\015\023\016\033\017\037\001\001\000\002" +
    "\001\001\000\016\022\133\023\073\024\074\025\047\026" +
    "\046\027\075\001\001\000\002\001\001\000\024\005\027" +
    "\010\135\011\026\012\034\013\036\014\040\015\023\016" +
    "\033\017\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 this.s = s; 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    Lexer s;
    CodeGenerator codeGen;

    Parser(Lexer s) {this.s = s;}

    public void setCodeGenerator (CodeGenerator cg) {
        this.codeGen = cg;
    }

    ArrayList<String> vars = new ArrayList<>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declarations stmt_block 
            {
              Object RESULT =null;
		
        codeGen.emitQuad("HALT");
        codeGen.emitQuad("Gev Zoran");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= declarations declaration 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= idlist COLON type SCOLON 
            {
              Object RESULT =null;
		


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= INT 
            {
              Object RESULT =null;
		
                for (String var : vars) {
                    codeGen.declare(var, "int");
                }
                vars.clear();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= FLOAT 
            {
              Object RESULT =null;
		
                for (String var : vars) {
                    codeGen.declare(var, "float");
                }
                vars.clear();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // idlist ::= idlist COMMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 vars.add(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // idlist ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 vars.add(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idlist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= assignment_stmt 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= input_stmt 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= output_stmt 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= if_stmt 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= while_stmt 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= switch_stmt 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= break_stmt 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= stmt_block 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // assignment_stmt ::= ID EQUALS expression SCOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(codeGen.getType(id).equals(codeGen.getType(e))){
        if(codeGen.getType(id).equals("float")){
            codeGen.emitQuad("RASN", id, e);
        }
        if(codeGen.getType(id).equals("int")){
            codeGen.emitQuad("IASN", id, e);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // input_stmt ::= INPUT LPAREN ID RPAREN SCOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if(codeGen.getType(id).equals("int")) {
         codeGen.emitQuad("IINP", id);
    }
    if(codeGen.getType(id).equals("float")) {
             codeGen.emitQuad("RINP", id);
    }
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // output_stmt ::= OUTPUT LPAREN expression RPAREN SCOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
     if(codeGen.getType(e).equals("int")) {
             codeGen.emitQuad("IPRT", e);
     }
     if(codeGen.getType(e).equals("float")) {
             codeGen.emitQuad("RPRT", e);
     }
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // if_stmt ::= IF LPAREN boolexpr RPAREN stmt ELSE stmt 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
        if(be.equals("1")){
            System.out.println("TRUE");
        }else if (be.equals("0")) {
            System.out.println("FALSE");
        }


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // while_stmt ::= WHILE LPAREN boolexpr RPAREN stmt 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // switch_stmt ::= SWITCH LPAREN expression RPAREN LBRACE caselist DEFAULT COLON stmtlist RBRACE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // caselist ::= caselist CASE NUM COLON stmtlist 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caselist",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // caselist ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caselist",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // break_stmt ::= BREAK SCOLON 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt_block ::= LBRACE stmtlist RBRACE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_block",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmtlist ::= stmtlist stmt 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmtlist ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtlist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boolexpr ::= boolexpr OR boolterm 
            {
              String RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // boolexpr ::= boolterm 
            {
              String RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int btright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boolterm ::= boolterm AND boolfactor 
            {
              String RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolterm",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boolterm ::= boolfactor 
            {
              String RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = bf; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolterm",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boolfactor ::= NOT LPAREN boolexpr RPAREN 
            {
              String RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolfactor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // boolfactor ::= expression RELOP expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String rel = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = codeGen.binaryOp(rel, e1, e2);
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolfactor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression ADDOP term 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = codeGen.binaryOp(op, e, t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= term 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // term ::= term MULOP factor 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = codeGen.binaryOp(op, t, f);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // term ::= factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= LPAREN expression RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = e;
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= CAST LPAREN expression RPAREN 
            {
              String RESULT =null;
		int castleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int castright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cast = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                String temp = codeGen.genTemp();
                if (cast.equals("cast<int>")) {
                    codeGen.emitQuad("RTOI", temp, e);
                    codeGen.declare(temp, "int");
                }
                if (cast.equals("cast<float>")) {
                    codeGen.emitQuad("ITOR", temp, e);
                    codeGen.declare(temp, "float");
                }
                RESULT = temp;
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = id;
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= NUM 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = num;
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
